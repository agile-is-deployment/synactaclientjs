/**
 * synactaclientjs
 * WebApi
 *
 * OpenAPI spec version: v1
 * Contact: bhofmann@agile-is.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Container', 'model/KeyValuePairStringString', 'model/DocumentVersion'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Container'), require('../model/KeyValuePairStringString'), require('../model/DocumentVersion'));
  } else {
    // Browser globals (root is window)
    if (!root.Synactaclientjs) {
      root.Synactaclientjs = {};
    }
    root.Synactaclientjs.BaseApi = factory(root.Synactaclientjs.ApiClient, root.Synactaclientjs.Container, root.Synactaclientjs.KeyValuePairStringString, root.Synactaclientjs.DocumentVersion);
  }
}(this, function(ApiClient, Container, KeyValuePairStringString, DocumentVersion) {
  'use strict';

  /**
   * Base service.
   * @module api/BaseApi
   * @version v1
   */

  /**
   * Constructs a new BaseApi. 
   * @alias module:api/BaseApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the apiBaseByTypeByIdAddByNewContainerTypeGet operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdAddByNewContainerTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Container} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the empty container.
     * @param {String} type Type of the container.
     * @param {String} id The container identifier.
     * @param {String} newContainerType New type of the container.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdAddByNewContainerTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Container}
     */
    this.apiBaseByTypeByIdAddByNewContainerTypeGet = function(type, id, newContainerType, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdAddByNewContainerTypeGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdAddByNewContainerTypeGet";
      }

      // verify the required parameter 'newContainerType' is set
      if (newContainerType == undefined || newContainerType == null) {
        throw "Missing the required parameter 'newContainerType' when calling apiBaseByTypeByIdAddByNewContainerTypeGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdAddByNewContainerTypeGet";
      }


      var pathParams = {
        'type': type,
        'id': id,
        'newContainerType': newContainerType
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = Container;

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Add/{newContainerType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdAddPut operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdAddPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Container} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves the new container.
     * @param {String} type Type of the container.
     * @param {String} id The container identifier.
     * @param {String} authorization access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Container} opts.newContainer The new container.
     * @param {module:api/BaseApi~apiBaseByTypeByIdAddPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Container}
     */
    this.apiBaseByTypeByIdAddPut = function(type, id, authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['newContainer'];

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdAddPut";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdAddPut";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdAddPut";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = Container;

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Add', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdCheckinPut operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdCheckinPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Container} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checkins the specified .
     * @param {String} type Type of the document.
     * @param {String} id The document identifier.
     * @param {String} authorization access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Container} opts.container The container.
     * @param {module:api/BaseApi~apiBaseByTypeByIdCheckinPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Container}
     */
    this.apiBaseByTypeByIdCheckinPut = function(type, id, authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['container'];

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdCheckinPut";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdCheckinPut";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdCheckinPut";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = Container;

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Checkin', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdCheckoutPut operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdCheckoutPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Container} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checkouts the specified .
     * @param {String} type Type of the document.
     * @param {String} id The document identifier.
     * @param {String} authorization access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Container} opts.container The container.
     * @param {module:api/BaseApi~apiBaseByTypeByIdCheckoutPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Container}
     */
    this.apiBaseByTypeByIdCheckoutPut = function(type, id, authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['container'];

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdCheckoutPut";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdCheckoutPut";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdCheckoutPut";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = Container;

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Checkout', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdChildrenGet operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdChildrenGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Container>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the children of container.
     * @param {String} type Type of the container.
     * @param {String} id The container identifier.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdChildrenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Container>}
     */
    this.apiBaseByTypeByIdChildrenGet = function(type, id, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdChildrenGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdChildrenGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdChildrenGet";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [Container];

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Children', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdChildrenTypesGet operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdChildrenTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the container types.
     * @param {String} type Type of the container.
     * @param {String} id The container identifier.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdChildrenTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.apiBaseByTypeByIdChildrenTypesGet = function(type, id, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdChildrenTypesGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdChildrenTypesGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdChildrenTypesGet";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Children/Types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdDelete operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the container.
     * @param {String} type Type of the container.
     * @param {String} id The container identifier.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.apiBaseByTypeByIdDelete = function(type, id, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdDelete";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdDelete";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdDocumentsGet operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdDocumentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Container>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the documents.
     * @param {String} type Type of the container.
     * @param {String} id The container identifier.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdDocumentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Container>}
     */
    this.apiBaseByTypeByIdDocumentsGet = function(type, id, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdDocumentsGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdDocumentsGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdDocumentsGet";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [Container];

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdDocumentsTypesGet operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdDocumentsTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the documents types.
     * @param {String} type Type of the container.
     * @param {String} id The container identifier.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdDocumentsTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.apiBaseByTypeByIdDocumentsTypesGet = function(type, id, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdDocumentsTypesGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdDocumentsTypesGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdDocumentsTypesGet";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Documents/Types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdGet operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Container} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the container by identifier.
     * @param {String} type Type of the container.
     * @param {String} id The container identifer.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Container}
     */
    this.apiBaseByTypeByIdGet = function(type, id, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdGet";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = Container;

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdGetFileGet operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdGetFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the file.
     * @param {String} type Type of the document.
     * @param {String} id The document identifier.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdGetFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiBaseByTypeByIdGetFileGet = function(type, id, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdGetFileGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdGetFileGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdGetFileGet";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/GetFile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdLookupListByLookupListNameGet operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdLookupListByLookupListNameGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/KeyValuePairStringString>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the lookup list entries.
     * @param {String} type Type of the container.
     * @param {String} id The container identifier.
     * @param {String} lookupListName Name of the lookup list.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdLookupListByLookupListNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/KeyValuePairStringString>}
     */
    this.apiBaseByTypeByIdLookupListByLookupListNameGet = function(type, id, lookupListName, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdLookupListByLookupListNameGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdLookupListByLookupListNameGet";
      }

      // verify the required parameter 'lookupListName' is set
      if (lookupListName == undefined || lookupListName == null) {
        throw "Missing the required parameter 'lookupListName' when calling apiBaseByTypeByIdLookupListByLookupListNameGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdLookupListByLookupListNameGet";
      }


      var pathParams = {
        'type': type,
        'id': id,
        'lookupListName': lookupListName
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [KeyValuePairStringString];

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/LookupList/{lookupListName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdMovePost operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdMovePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Container} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves the object.
     * @param {String} type Type of the container.
     * @param {String} id The container identifier.
     * @param {String} authorization access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Container} opts.container The container.
     * @param {module:api/BaseApi~apiBaseByTypeByIdMovePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Container}
     */
    this.apiBaseByTypeByIdMovePost = function(type, id, authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['container'];

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdMovePost";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdMovePost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdMovePost";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = Container;

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdPost operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Container} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the container.
     * @param {String} type Type of the container.
     * @param {String} id The container identifier.
     * @param {String} authorization access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Container} opts.newContainer The new container.
     * @param {module:api/BaseApi~apiBaseByTypeByIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Container}
     */
    this.apiBaseByTypeByIdPost = function(type, id, authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['newContainer'];

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdPost";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdPost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdPost";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json'];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = Container;

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdUploadFilePost operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdUploadFilePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads the file.
     * @param {String} type Type of the document.
     * @param {String} id The document identifier.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdUploadFilePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiBaseByTypeByIdUploadFilePost = function(type, id, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdUploadFilePost";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdUploadFilePost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdUploadFilePost";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/UploadFile', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdVersionsByVersionIdGet operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdVersionsByVersionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the version by identifier.
     * @param {String} type Type of the document.
     * @param {String} id The document identifier.
     * @param {String} versionId The version identifier.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdVersionsByVersionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentVersion}
     */
    this.apiBaseByTypeByIdVersionsByVersionIdGet = function(type, id, versionId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdVersionsByVersionIdGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdVersionsByVersionIdGet";
      }

      // verify the required parameter 'versionId' is set
      if (versionId == undefined || versionId == null) {
        throw "Missing the required parameter 'versionId' when calling apiBaseByTypeByIdVersionsByVersionIdGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdVersionsByVersionIdGet";
      }


      var pathParams = {
        'type': type,
        'id': id,
        'versionId': versionId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DocumentVersion;

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Versions/{versionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdVersionsByVersionIdGetFileGet operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdVersionsByVersionIdGetFileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the file for version.
     * @param {String} type Type of the document .
     * @param {String} id The document identifier.
     * @param {String} versionId The version identifier.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdVersionsByVersionIdGetFileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiBaseByTypeByIdVersionsByVersionIdGetFileGet = function(type, id, versionId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdVersionsByVersionIdGetFileGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdVersionsByVersionIdGetFileGet";
      }

      // verify the required parameter 'versionId' is set
      if (versionId == undefined || versionId == null) {
        throw "Missing the required parameter 'versionId' when calling apiBaseByTypeByIdVersionsByVersionIdGetFileGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdVersionsByVersionIdGetFileGet";
      }


      var pathParams = {
        'type': type,
        'id': id,
        'versionId': versionId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Versions/{versionId}/GetFile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdVersionsByVersionIdRestorePost operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdVersionsByVersionIdRestorePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Container} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores the version.
     * @param {String} type Type of the document .
     * @param {String} id The document identifier.
     * @param {String} versionId The version identifier.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdVersionsByVersionIdRestorePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Container}
     */
    this.apiBaseByTypeByIdVersionsByVersionIdRestorePost = function(type, id, versionId, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdVersionsByVersionIdRestorePost";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdVersionsByVersionIdRestorePost";
      }

      // verify the required parameter 'versionId' is set
      if (versionId == undefined || versionId == null) {
        throw "Missing the required parameter 'versionId' when calling apiBaseByTypeByIdVersionsByVersionIdRestorePost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdVersionsByVersionIdRestorePost";
      }


      var pathParams = {
        'type': type,
        'id': id,
        'versionId': versionId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = Container;

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Versions/{versionId}/Restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeByIdVersionsGet operation.
     * @callback module:api/BaseApi~apiBaseByTypeByIdVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DocumentVersion>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the versions.
     * @param {String} type Type of the document.
     * @param {String} id The document identifier.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeByIdVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DocumentVersion>}
     */
    this.apiBaseByTypeByIdVersionsGet = function(type, id, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeByIdVersionsGet";
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiBaseByTypeByIdVersionsGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeByIdVersionsGet";
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [DocumentVersion];

      return this.apiClient.callApi(
        '/_api/base/{type}/{id}/Versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseByTypeGet operation.
     * @callback module:api/BaseApi~apiBaseByTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Container>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets containers by a type.
     * @param {String} type Type of the container.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseByTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Container>}
     */
    this.apiBaseByTypeGet = function(type, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type == undefined || type == null) {
        throw "Missing the required parameter 'type' when calling apiBaseByTypeGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseByTypeGet";
      }


      var pathParams = {
        'type': type
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [Container];

      return this.apiClient.callApi(
        '/_api/base/{type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseRootGet operation.
     * @callback module:api/BaseApi~apiBaseRootGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Container>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the root.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseRootGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Container>}
     */
    this.apiBaseRootGet = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseRootGet";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [Container];

      return this.apiClient.callApi(
        '/_api/base/Root', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBaseTypesGet operation.
     * @callback module:api/BaseApi~apiBaseTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the container types.
     * @param {String} authorization access token
     * @param {module:api/BaseApi~apiBaseTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.apiBaseTypesGet = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiBaseTypesGet";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/_api/base/Types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
