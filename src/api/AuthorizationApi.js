/**
 * synactaclientjs
 * WebApi
 *
 * OpenAPI spec version: v1
 * Contact: bhofmann@agile-is.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PrincipalSearchResult', 'model/Right', 'model/Role'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PrincipalSearchResult'), require('../model/Right'), require('../model/Role'));
  } else {
    // Browser globals (root is window)
    if (!root.Synactaclientjs) {
      root.Synactaclientjs = {};
    }
    root.Synactaclientjs.AuthorizationApi = factory(root.Synactaclientjs.ApiClient, root.Synactaclientjs.PrincipalSearchResult, root.Synactaclientjs.Right, root.Synactaclientjs.Role);
  }
}(this, function(ApiClient, PrincipalSearchResult, Right, Role) {
  'use strict';

  /**
   * Authorization service.
   * @module api/AuthorizationApi
   * @version v1
   */

  /**
   * Constructs a new AuthorizationApi. 
   * @alias module:api/AuthorizationApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the apiAuthorizationPrincipalsByIdGet operation.
     * @callback module:api/AuthorizationApi~apiAuthorizationPrincipalsByIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrincipalSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a principal by his identifier.
     * @param {String} id The principal identifier.
     * @param {String} authorization access token
     * @param {module:api/AuthorizationApi~apiAuthorizationPrincipalsByIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrincipalSearchResult}
     */
    this.apiAuthorizationPrincipalsByIdGet = function(id, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiAuthorizationPrincipalsByIdGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiAuthorizationPrincipalsByIdGet";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = PrincipalSearchResult;

      return this.apiClient.callApi(
        '/_api/authorization/Principals/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthorizationPrincipalsGet operation.
     * @callback module:api/AuthorizationApi~apiAuthorizationPrincipalsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrincipalSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the principals.
     * @param {String} authorization access token
     * @param {module:api/AuthorizationApi~apiAuthorizationPrincipalsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrincipalSearchResult>}
     */
    this.apiAuthorizationPrincipalsGet = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiAuthorizationPrincipalsGet";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json'];
      var returnType = [PrincipalSearchResult];

      return this.apiClient.callApi(
        '/_api/authorization/Principals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthorizationRightsGet operation.
     * @callback module:api/AuthorizationApi~apiAuthorizationRightsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Right>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the rights.
     * @param {String} authorization access token
     * @param {module:api/AuthorizationApi~apiAuthorizationRightsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Right>}
     */
    this.apiAuthorizationRightsGet = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiAuthorizationRightsGet";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [Right];

      return this.apiClient.callApi(
        '/_api/authorization/Rights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthorizationRolesAddGet operation.
     * @callback module:api/AuthorizationApi~apiAuthorizationRolesAddGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the role container.
     * @param {String} authorization access token
     * @param {module:api/AuthorizationApi~apiAuthorizationRolesAddGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.apiAuthorizationRolesAddGet = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiAuthorizationRolesAddGet";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/_api/authorization/Roles/Add', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthorizationRolesAddPut operation.
     * @callback module:api/AuthorizationApi~apiAuthorizationRolesAddPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the role.
     * @param {String} authorization access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Role} opts.role The role.
     * @param {module:api/AuthorizationApi~apiAuthorizationRolesAddPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.apiAuthorizationRolesAddPut = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['role'];

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiAuthorizationRolesAddPut";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json', 'application/xml', 'text/xml'];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/_api/authorization/Roles/Add', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthorizationRolesByIdDelete operation.
     * @callback module:api/AuthorizationApi~apiAuthorizationRolesByIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the role.
     * @param {String} id The role identifier.
     * @param {String} authorization access token
     * @param {module:api/AuthorizationApi~apiAuthorizationRolesByIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    this.apiAuthorizationRolesByIdDelete = function(id, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiAuthorizationRolesByIdDelete";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiAuthorizationRolesByIdDelete";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'Boolean';

      return this.apiClient.callApi(
        '/_api/authorization/Roles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthorizationRolesByIdGet operation.
     * @callback module:api/AuthorizationApi~apiAuthorizationRolesByIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the role.
     * @param {String} id The role identifier.
     * @param {String} authorization access token
     * @param {module:api/AuthorizationApi~apiAuthorizationRolesByIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.apiAuthorizationRolesByIdGet = function(id, authorization, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiAuthorizationRolesByIdGet";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiAuthorizationRolesByIdGet";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/_api/authorization/Roles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthorizationRolesByIdPost operation.
     * @callback module:api/AuthorizationApi~apiAuthorizationRolesByIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the role.
     * @param {String} id The role identifier.
     * @param {String} authorization access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Role} opts.role The role.
     * @param {module:api/AuthorizationApi~apiAuthorizationRolesByIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.apiAuthorizationRolesByIdPost = function(id, authorization, opts, callback) {
      opts = opts || {};
      var postBody = opts['role'];

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw "Missing the required parameter 'id' when calling apiAuthorizationRolesByIdPost";
      }

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiAuthorizationRolesByIdPost";
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/json-patch+json', 'application/xml', 'text/xml'];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/_api/authorization/Roles/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthorizationRolesGet operation.
     * @callback module:api/AuthorizationApi~apiAuthorizationRolesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the roles.
     * @param {String} authorization access token
     * @param {module:api/AuthorizationApi~apiAuthorizationRolesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    this.apiAuthorizationRolesGet = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw "Missing the required parameter 'authorization' when calling apiAuthorizationRolesGet";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [Role];

      return this.apiClient.callApi(
        '/_api/authorization/Roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
